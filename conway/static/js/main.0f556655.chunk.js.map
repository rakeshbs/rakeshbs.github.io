{"version":3,"sources":["lib/world.ts","p5/sketch.ts","p5/wrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["World","nRows","nCols","isRunning","simulationSpeed","currentState","numberOfRows","numberOfColumns","toggleStateAt","row","column","countNeighbours","col","count","k","l","r","c","this","i","j","instance","newState","neighbours","sketch","side","lineSpace","frameCount","usedCells","world","getWorld","setup","Math","min","window","innerWidth","innerHeight","createCanvas","draw","clear","posX","line","posY","drawGrid","rows","cols","fill","rect","drawPopulation","console","log","update","mousePressed","mouseDragged","floor","mouseX","mouseY","pos","includes","push","mouseClicked","P5Wrapper","canvas","wrapper","React","createRef","componentDidUpdate","props","setSketch","ref","current","childNodes","removeChild","p5","onP5Changed","Component","App","state","gridSize","onToggleClick","setState","onSizeChange","e","size","Number","parseInt","target","value","undefined","isNaN","onChangeClick","instantiateWorld","onSpeedChange","parsed","speed","p","className","type","id","onChange","onClick","max","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f556655.chunk.js","sourcesContent":["class World {\n  isRunning = false\n  simulationSpeed = 60\n  currentState: boolean[][] = []\n  numberOfRows: number = 0\n  numberOfColumns: number = 0\n  private static instance: World;\n\n  public static getWorld(): World {\n    return World.instance;\n  }\n\n  public static instantiateWorld(nRows: number, nCols: number): World {\n    World.instance = new World(nRows, nCols);\n    return World.instance\n  }\n\n  constructor(nRows: number, nCols: number) {\n    this.numberOfColumns = nCols\n    this.numberOfRows = nRows\n    this.numberOfColumns = this.numberOfRows\n    this.simulationSpeed = 60\n\n    for (let i = 0; i < nRows; i++) {\n      this.currentState[i] = []\n      for (let j = 0; j < nCols; j++) {\n        this.currentState[i][j] = false\n      }\n    }\n  }\n\n  toggleStateAt = (row: number, column: number) => {\n    if (row >= 0 && column >= 0 && row <\n      this.numberOfRows && column < this.numberOfColumns) {\n      this.currentState[row][column] = !this.currentState[row][column]\n    }\n  }\n\n  countNeighbours = (row: number, col: number) => {\n    let count = 0\n    for (let k = -1; k <= 1; k++) {\n      for (let l = -1; l <= 1; l++) {\n        if (k !== 0 || l !== 0) {\n          let r = row + k\n          let c = col + l\n          if (r >= 0 && c >= 0 && r < this.numberOfRows && c < this.numberOfColumns) {\n            if (this.currentState[r][c]) count++\n          }\n        }\n      }\n    }\n    return count\n  }\n\n  update() {\n    let newState: boolean[][] = []\n    for (let i = 0; i < this.numberOfRows; i++) {\n      newState[i] = []\n      for (let j = 0; j < this.numberOfColumns; j++) {\n        newState[i][j] = false\n        let neighbours = this.countNeighbours(i, j)\n        if (this.currentState[i][j]) {\n          if (neighbours < 2) {\n            newState[i][j] = false\n          } else if (neighbours > 3) {\n            newState[i][j] = false\n          } else {\n            newState[i][j] = true\n          }\n        } else {\n          if (neighbours === 3) {\n            newState[i][j] = true\n          }\n        }\n      }\n    }\n    this.currentState = newState\n  }\n}\n\nexport {World}\n","import * as p5 from \"p5\"\nimport { World } from \"../lib/world\"\n\nexport default function(sketch: p5) {\n  let side = 0\n  let lineSpace = 0\n  let frameCount = 1\n  let usedCells: Array<number> = []\n  let world = () => {\n    return World.getWorld()\n  }\n\n  sketch.setup = () => {\n    side = Math.min(window.innerWidth, window.innerHeight)\n    sketch.createCanvas(side, side)\n  }\n\n  let drawGrid = () => {\n    lineSpace = side / world().numberOfRows\n    for (let i = 0; i < world().numberOfRows; i++) {\n      let posX = i * lineSpace\n      sketch.line(posX, 0, posX, 2000)\n      let posY = i * lineSpace\n      sketch.line(0, posY, 2000, posY)\n    }\n  }\n\n  let drawPopulation = () => {\n    let rows = world().numberOfRows\n    let cols = world().numberOfColumns\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (world().currentState[i][j]) {\n          let posX = i * lineSpace\n          let posY = j * lineSpace\n          sketch.fill(0, 0, 0, 200)\n          sketch.rect(posX, posY, lineSpace, lineSpace)\n        }\n      }\n    }\n  }\n\n  sketch.draw = () => {\n    sketch.clear()\n    drawGrid()\n    drawPopulation()\n    if (world().isRunning) {\n      console.log(world().simulationSpeed)\n      if (frameCount % world().simulationSpeed === 0) {\n        world().update()\n      }\n      frameCount++\n    } else frameCount = 0\n  }\n\n  sketch.mousePressed = () => {\n    usedCells = []\n  }\n  sketch.mouseDragged = () => {\n    let row = Math.floor(sketch.mouseX / lineSpace)\n    let column = Math.floor(sketch.mouseY / lineSpace)\n    let pos = 10000000 * row + column\n    if (!usedCells.includes(pos)) {\n      usedCells.push(pos)\n      world().toggleStateAt(row, column)\n    }\n  }\n\n  sketch.mouseClicked = () => {\n    let row = Math.floor(sketch.mouseX / lineSpace)\n    let column = Math.floor(sketch.mouseY / lineSpace)\n    world().toggleStateAt(row, column)\n  }\n}\n","import p5 from \"p5\"\nimport React from \"react\"\nimport {World} from \"../lib/world\"\n\nexport interface IProps {\n  sketch: (sketch: p5) => void\n  onP5Changed?: (sketch: p5) => void\n  isRunning: boolean\n  speed?: number\n}\n\nexport default class P5Wrapper extends React.Component<IProps, {}> {\n  public canvas?: p5\n  private wrapper: React.RefObject<HTMLDivElement> = React.createRef()\n\n\n  public componentDidMount() {\n    this.setSketch(this.props)\n  }\n\n  componentDidUpdate = () => {\n    World.getWorld().isRunning = this.props.isRunning\n  }\n\n  //public componentWillReceiveProps(newprops: IProps) {\n    //if (this.props.sketch !== newprops.sketch) {\n      //this.setSketch(newprops)\n    //}\n  //}\n\n  public render() {\n    return <div ref={this.wrapper} />\n  }\n\n  private setSketch(props: IProps) {\n    const current = this.wrapper.current;\n    if (current) {\n      if (current.childNodes[0]) {\n        current.removeChild(current.childNodes[0])\n      }\n      this.canvas = new p5(props.sketch, current)\n      if (props.onP5Changed) {\n        props.onP5Changed(this.canvas)\n      }\n    }\n  }\n}\n","import React from \"react\";\nimport p5 from \"p5\";\nimport sketch from \"./p5/sketch\";\nimport P5Wrapper from \"./p5/wrapper\";\nimport {World} from \"./lib/world\"\nimport \"./App.css\"\n\nexport interface AppState {\n  isRunning: boolean\n  simulationSpeed: number\n  gridSize: number\n}\n\nclass App extends React.Component<{}, AppState> {\n\n  state = {isRunning: false, simulationSpeed: 60, gridSize: 20}\n\n  constructor(props: any) {\n    super(props);\n    World.instantiateWorld(this.state.gridSize, this.state.gridSize)\n  }\n\n  onToggleClick = () => {\n    this.setState({isRunning: !this.state.isRunning})\n  }\n\n  onSizeChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let size = Number.parseInt(e.target.value)\n    if (size !== undefined && !isNaN(size))\n      this.setState( {gridSize: size})\n    else \n      this.setState( {gridSize: 0})\n\n  }\n\n  onChangeClick = () => {\n    this.setState({isRunning: false});\n    let size = this.state.gridSize\n    if (size > 100) size = 100\n    if (size < 2) size = 2\n    this.setState( {gridSize: size})\n    World.instantiateWorld(this.state.gridSize, this.state.gridSize)\n  }\n\n  onSpeedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let parsed = Number.parseInt(e.target.value)\n    if (parsed !== undefined && !isNaN(parsed)) {\n      this.setState({simulationSpeed: parsed})\n      let speed = 120 - parsed\n      console.log(speed)\n      World.getWorld().simulationSpeed = speed\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"rowC\">\n        <div >\n        <P5Wrapper sketch={sketch} onP5Changed={this.onP5Changed} \n        isRunning ={this.state.isRunning}\n      />\n        </div>\n        <div className=\"start\">\n          <br/>\n          Size\n          <input type=\"text\" id=\"size\" value={this.state.gridSize} onChange={this.onSizeChange}/>\n          <button onClick={this.onChangeClick} >Change / Reset </button>\n          <br/>\n          <br/>\n          <button onClick={this.onToggleClick} >{this.state.isRunning ? \"Stop\" : \"Start\"} </button>\n          <br/>\n          <br/>\n          Speed\n            <input type=\"range\" min=\"1\" max=\"100\" \n              onChange={this.onSpeedChange} className=\"slider\" id=\"myRange\"/>\n        </div>\n      </div>\n    )\n  }\n\n  private onP5Changed = (p: p5) => {\n    // tslint:disable:no-console\n    console.log(p);\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void,\n  onUpdate?: (registration: ServiceWorkerRegistration) => void,\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}